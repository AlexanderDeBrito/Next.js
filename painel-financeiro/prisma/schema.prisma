// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ATTENDANT
  PROFESSIONAL
  PATIENT
}

enum ClinicType {
  MEDICAL
  DENTAL
  AESTHETIC
}

enum ProfessionalType {
  DOCTOR
  DENTIST
  AESTHETICIAN
}

enum AppointmentStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(PATIENT)
  phone     String?
  cpf       String?  @unique
  birthDate DateTime?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clinics              Clinic[]
  professionalProfile  Professional?
  patientAppointments  Appointment[] @relation("PatientAppointments")
  attendantAppointments Appointment[] @relation("AttendantAppointments")

  @@map("users")
}

model Clinic {
  id          String     @id @default(cuid())
  name        String
  type        ClinicType
  cnpj        String?    @unique
  phone       String
  email       String
  address     String
  description String?
  logo        String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  owner         User           @relation(fields: [ownerId], references: [id])
  ownerId       String
  professionals Professional[]
  insurances    Insurance[]
  specialties   Specialty[]
  appointments  Appointment[]

  @@map("clinics")
}

model Professional {
  id           String           @id @default(cuid())
  type         ProfessionalType
  license      String           @unique // CRM, CRO, etc.
  specialty    String?
  bio          String?
  avatar       String?
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  clinic       Clinic        @relation(fields: [clinicId], references: [id])
  clinicId     String
  appointments Appointment[]

  @@map("professionals")
}

model Insurance {
  id        String   @id @default(cuid())
  name      String
  code      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clinic       Clinic        @relation(fields: [clinicId], references: [id])
  clinicId     String
  appointments Appointment[]

  @@map("insurances")
}

model Specialty {
  id        String   @id @default(cuid())
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clinic       Clinic        @relation(fields: [clinicId], references: [id])
  clinicId     String
  appointments Appointment[]

  @@map("specialties")
}

model Appointment {
  id            String            @id @default(cuid())
  date          DateTime
  time          String
  status        AppointmentStatus @default(PENDING)
  notes         String?
  hasInsurance  Boolean           @default(false)
  isOnline      Boolean           @default(true)
  rejectionReason String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  patient       User         @relation("PatientAppointments", fields: [patientId], references: [id])
  patientId     String
  professional  Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  clinic        Clinic       @relation(fields: [clinicId], references: [id])
  clinicId      String
  insurance     Insurance?   @relation(fields: [insuranceId], references: [id])
  insuranceId   String?
  specialty     Specialty?   @relation(fields: [specialtyId], references: [id])
  specialtyId   String?
  attendant     User?        @relation("AttendantAppointments", fields: [attendantId], references: [id])
  attendantId   String?

  @@map("appointments")
}